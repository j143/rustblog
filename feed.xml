<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://blog.rust-lang.org/" version="0.1.0">Rust Blog</generator>
    <link href="https://blog.rust-lang.org/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://blog.rust-lang.org/" rel="alternate" type="text/html" />
    <id>https://blog.rust-lang.org/</id>
    <title>Rust Blog</title>
    <subtitle>Empowering everyone to build reliable and efficient software.</subtitle>
    <author>
        <name>Maintained by the Rust Teams.</name>
        <uri>https://github.com/rust-lang/blog.rust-lang.org/</uri>
    </author>
    <updated>2022-07-24T16:22:23+00:00</updated>

    
    <entry>
        <title>Announcing Rust 1.62.1</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2022/07/19/Rust-1.62.1.html" type="text/html" title="Announcing Rust 1.62.1" />
        <published>2022-07-19T00:00:00+00:00</published>
        <updated>2022-07-19T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2022/07/19/Rust-1.62.1.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2022/07/19/Rust-1.62.1.html">&lt;p&gt;The Rust team has published a new point release of Rust, 1.62.1. Rust is a
programming language that is empowering everyone to build reliable and
efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via rustup, you can get 1.62.1 with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt;
from the appropriate page on our website, and check out the
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1621-2022-07-19&quot;&gt;detailed release notes for 1.62.1&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-in-1621-stable&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-in-1621-stable&quot;&gt;&lt;/a&gt;What&#x27;s in 1.62.1 stable&lt;/h2&gt;
&lt;p&gt;Rust 1.62.1 addresses a few recent regressions in the compiler and standard
library, and also mitigates a CPU vulnerability on Intel SGX.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/98608&quot;&gt;The compiler fixed unsound function coercions involving &lt;code&gt;impl Trait&lt;/code&gt; return types.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/98890&quot;&gt;The compiler fixed an incremental compilation bug with &lt;code&gt;async fn&lt;/code&gt; lifetimes.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/98950&quot;&gt;Windows added a fallback for overlapped I/O in synchronous reads and writes.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/98126&quot;&gt;The &lt;code&gt;x86_64-fortanix-unknown-sgx&lt;/code&gt; target added a mitigation for the
MMIO stale data vulnerability&lt;/a&gt;, advisory &lt;a href&#x3D;&quot;https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00615.html&quot;&gt;INTEL-SA-00615&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#contributors-to-1621&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;contributors-to-1621&quot;&gt;&lt;/a&gt;Contributors to 1.62.1&lt;/h3&gt;
&lt;p&gt;Many people came together to create Rust 1.62.1. We couldn&#x27;t have done it
without all of you. &lt;a href&#x3D;&quot;https://thanks.rust-lang.org/rust/1.62.1/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Release Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Changes in the Core Team</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2022/07/12/changes-in-the-core-team.html" type="text/html" title="Changes in the Core Team" />
        <published>2022-07-12T00:00:00+00:00</published>
        <updated>2022-07-12T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2022/07/12/changes-in-the-core-team.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2022/07/12/changes-in-the-core-team.html">&lt;p&gt;We want to say farewell and thanks to a couple of people who are stepping back from the Core Team:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Aidan Hobson Sayers is leaving the Core Team and other roles. Joining the Core Team in 2018, he started out on the project with fixing CI issues and has been a member of the Infrastructure Team since its inception (moving through lead and co-lead). Aidan wants to dedicate more time to working with the Rust community and growing Rust usage at his company, and is looking forward to doing so from the other side of the fence.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ashley Williams will be stepping down from the Core Team and other roles. She became a member of the Core Team in 2018 and has had impact on many parts of the project, from leading the Community team, to setting up PagerDuty for Infrastructure and Crates.io, to the Wasm working group, to Increasing Rustâ€™s Reach and Rustbridge, to her instrumental work creating the Rust Foundation and serving as its first Executive Director. Ashley is leaving her role in the project to focus on her newly founded company.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Many thanks to both of them for their contributions and we look forward to seeing their future efforts with Rust!&lt;/p&gt;
</content>

        <author>
            <name>The Rust Core Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rustup 1.25.1</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2022/07/12/Rustup-1.25.1.html" type="text/html" title="Announcing Rustup 1.25.1" />
        <published>2022-07-12T00:00:00+00:00</published>
        <updated>2022-07-12T00:00:01+00:00</updated>
        <id>https://blog.rust-lang.org/2022/07/12/Rustup-1.25.1.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2022/07/12/Rustup-1.25.1.html">&lt;p&gt;The rustup working group is announcing the release of rustup version 1.25.1.
&lt;a href&#x3D;&quot;https://rustup.rs&quot;&gt;Rustup&lt;/a&gt; is the recommended tool to install &lt;a href&#x3D;&quot;https://www.rust-lang.org&quot;&gt;Rust&lt;/a&gt;, a
programming language that is empowering everyone to build reliable and
efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of rustup installed, getting rustup 1.25.1 is as
easy as stopping any programs which may be using Rustup (e.g. closing your IDE)
and running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup self update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rustup will also automatically update itself at the end of a normal toolchain
update:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://rustup.rs&quot;&gt;get rustup&lt;/a&gt; from the
appropriate page on our website.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-new-in-rustup-1251&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-new-in-rustup-1251&quot;&gt;&lt;/a&gt;What&#x27;s new in rustup 1.25.1&lt;/h2&gt;
&lt;p&gt;This version of rustup fixes a regression introduced in the previous release
(1.25.0), which caused some workflows to fail.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#regression-in-nested-cargo-invocations-with-different-toolchains&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;regression-in-nested-cargo-invocations-with-different-toolchains&quot;&gt;&lt;/a&gt;Regression in nested Cargo invocations with different toolchains&lt;/h3&gt;
&lt;p&gt;When you invoke Rust or Cargo installed by rustup, you&#x27;re not running them
directly. Instead, you run &lt;a href&#x3D;&quot;https://rust-lang.github.io/rustup/concepts/proxies.html&quot;&gt;rustup &amp;quot;proxy&amp;quot; binaries&lt;/a&gt;, whose job is to
detect the right toolchain (parsing the &lt;code&gt;+channel&lt;/code&gt; CLI argument or using one of
the defaults) and run it.&lt;/p&gt;
&lt;p&gt;Running these proxies is not instantaneous though, and for example a &lt;code&gt;cargo build&lt;/code&gt; invocation might execute several of them (the initial &lt;code&gt;cargo&lt;/code&gt; invocation
plus one &lt;code&gt;rustc&lt;/code&gt; for every dependency), slowing down the build.&lt;/p&gt;
&lt;p&gt;To improve performance, rustup 1.25.0 changed the proxies code to set the
&lt;a href&#x3D;&quot;https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-reads&quot;&gt;&lt;code&gt;RUSTC&lt;/code&gt; and &lt;code&gt;RUSTDOC&lt;/code&gt; environment variables&lt;/a&gt; when missing, which
instructed Cargo to skip the proxies and invoke the binaries defined in those
variables directly. This provided a performance gain when building crates with
lots of dependencies.&lt;/p&gt;
&lt;p&gt;Unfortunately this change broke some users of rustup, who did something like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The first Cargo invocation (for example an extension, an alias or an
integration test) uses toolchain &lt;code&gt;foo&lt;/code&gt;, setting the &lt;code&gt;RUSTC&lt;/code&gt; and &lt;code&gt;RUSTDOC&lt;/code&gt;
environment variables pointing to that toolchain.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The first invocation calls Cargo again, but this time using toolchain &lt;code&gt;bar&lt;/code&gt;
(for example &lt;code&gt;cargo +bar build&lt;/code&gt;). This does &lt;strong&gt;not&lt;/strong&gt; set the &lt;code&gt;RUSTC&lt;/code&gt; and
&lt;code&gt;RUSTDOC&lt;/code&gt; environment variables pointing to &lt;code&gt;bar&lt;/code&gt;, as those variables are
already present.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The second invocation of Cargo then invokes rustc by using the &lt;code&gt;RUSTC&lt;/code&gt;
environment variable and skipping the proxy, which results in the &lt;code&gt;foo&lt;/code&gt;
toolchain being invoked. Previous versions of rustup invoked the proxy
instead, which would correctly detect and use the &lt;code&gt;bar&lt;/code&gt; toolchain.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rustup 1.25.1 fixes this regression by reverting the change. The rustup working
group is discussing in &lt;a href&#x3D;&quot;https://github.com/rust-lang/rustup/issues/3035&quot;&gt;issue #3035&lt;/a&gt; plans to re-introduce the change in
a future release while avoiding breakage.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#thanks&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;thanks&quot;&gt;&lt;/a&gt;Thanks&lt;/h2&gt;
&lt;p&gt;Thanks again to all the contributors who made rustup 1.25.1 possible!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Daniel Silverstone (kinnison)&lt;/li&gt;
&lt;li&gt;Robert Collins (rbtcollins)&lt;/li&gt;
&lt;li&gt;Joshua Nelson (jyn514)&lt;/li&gt;
&lt;li&gt;Pietro Albini (pietroalbini)&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>The Rustup Working Group</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rustup 1.25.0</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2022/07/11/Rustup-1.25.0.html" type="text/html" title="Announcing Rustup 1.25.0" />
        <published>2022-07-11T00:00:00+00:00</published>
        <updated>2022-07-11T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2022/07/11/Rustup-1.25.0.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2022/07/11/Rustup-1.25.0.html">&lt;p&gt;The rustup working group is happy to announce the release of rustup version 1.25.0. &lt;a href&#x3D;&quot;https://rustup.rs&quot;&gt;Rustup&lt;/a&gt; is the recommended tool to install &lt;a href&#x3D;&quot;https://www.rust-lang.org&quot;&gt;Rust&lt;/a&gt;, a programming language that is empowering everyone to build reliable and efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of rustup installed, getting rustup 1.25.0 is as easy as stopping any programs which may be using Rustup (e.g. closing your IDE) and running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup self update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rustup will also automatically update itself at the end of a normal toolchain update:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://rustup.rs&quot;&gt;get rustup&lt;/a&gt; from the appropriate page on our website.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-new-in-rustup-1250&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-new-in-rustup-1250&quot;&gt;&lt;/a&gt;What&#x27;s new in rustup 1.25.0&lt;/h2&gt;
&lt;p&gt;This version of Rustup involves a significant number of internal cleanups, both in terms
of the Rustup code and its documentation. In addition to a lot of work on the codebase
itself, due to the length of time since the last release this one has a record number
of contributors and we thank you all for your efforts and time.&lt;/p&gt;
&lt;p&gt;One of the biggest changes in 1.25.0 is the new offer on Windows installs to auto-install
the Visual Studio 2022 compilers which should simplify the process of getting started for
people not used to developing on Windows with the MSVC-compatible toolchains.&lt;/p&gt;
&lt;p&gt;A second important change for 1.25.0 is a number of PRs focussed around startup performance
for Rustup. While it may not seem all that important to many, Rustup&#x27;s startup time is
a factor in the time it takes to do builds which involve large numbers of crates on systems
which do not have large numbers of CPU cores. Hopefully the people for whom this is a common
activity will notice an improvement; though there&#x27;s more opportunity to speed things up still available.&lt;/p&gt;
&lt;p&gt;Some, but by no means all, of the rest of this release&#x27;s highlights includes support for
&lt;code&gt;rustup default none&lt;/code&gt; to unset the default toolchain, support for Windows arm64, inclusion
of &lt;code&gt;rust-gdbgui&lt;/code&gt; as a proxy so that platforms which support it can use GDB&#x27;s gui mode with Rust,
and some improvements to &lt;code&gt;rustup-init.sh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Full details are available in the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rustup/blob/stable/CHANGELOG.md&quot;&gt;changelog&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Rustup&#x27;s documentation is also available in &lt;a href&#x3D;&quot;https://rust-lang.github.io/rustup/&quot;&gt;the rustup book&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#thanks&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;thanks&quot;&gt;&lt;/a&gt;Thanks&lt;/h2&gt;
&lt;p&gt;Thanks again to all the contributors who made rustup 1.25.0 possible!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;äºŒæ‰‹æŽ‰åŒ…å·¥ç¨‹å¸ˆ (hi-rustin)&lt;/li&gt;
&lt;li&gt;Brian Bowman (Seeker14491)&lt;/li&gt;
&lt;li&gt;Jon Gjengset (jonho)&lt;/li&gt;
&lt;li&gt;pierwill&lt;/li&gt;
&lt;li&gt;Daniel Silverstone (kinnison)&lt;/li&gt;
&lt;li&gt;Robert Collins (rbtcollins)&lt;/li&gt;
&lt;li&gt;Alan Somers (asomers)&lt;/li&gt;
&lt;li&gt;Brennan Vincent (umanwizard)&lt;/li&gt;
&lt;li&gt;Joshua Nelson (jyn514)&lt;/li&gt;
&lt;li&gt;Eric Huss (ehuss)&lt;/li&gt;
&lt;li&gt;Will Bush (willbush)&lt;/li&gt;
&lt;li&gt;Thad Guidry (thadguidry)&lt;/li&gt;
&lt;li&gt;Alexander Lovchin (alovchin91)&lt;/li&gt;
&lt;li&gt;zoodirector&lt;/li&gt;
&lt;li&gt;Takayuki Nakata (giraffate)&lt;/li&gt;
&lt;li&gt;Yusuke Abe (chansuke)&lt;/li&gt;
&lt;li&gt;Wyatt Carss (wcarss)&lt;/li&gt;
&lt;li&gt;Sondre Aasemoen (sondr3)&lt;/li&gt;
&lt;li&gt;facklambda&lt;/li&gt;
&lt;li&gt;Chad Dougherty (crd477)&lt;/li&gt;
&lt;li&gt;Noritada Kobayashi (noritada)&lt;/li&gt;
&lt;li&gt;Milan (mdaverde)&lt;/li&gt;
&lt;li&gt;Pat Sier (pjsier)&lt;/li&gt;
&lt;li&gt;Matt Keeter (mkeeter)&lt;/li&gt;
&lt;li&gt;Alex Macleod (alexendoo)&lt;/li&gt;
&lt;li&gt;Sathwik Matsa (sathwikmatsa)&lt;/li&gt;
&lt;li&gt;Kushal Das (kushaldas)&lt;/li&gt;
&lt;li&gt;Justus Winter (teythoon)&lt;/li&gt;
&lt;li&gt;k900&lt;/li&gt;
&lt;li&gt;Nicolas Ambram (nico-abram)&lt;/li&gt;
&lt;li&gt;Connor Slade (basicprogrammer10)&lt;/li&gt;
&lt;li&gt;Yerkebulan Tulibergenov (yerke)&lt;/li&gt;
&lt;li&gt;Caleb Cartwright (calebcartwright)&lt;/li&gt;
&lt;li&gt;Matthias Beyer (matthiasbeyer)&lt;/li&gt;
&lt;li&gt;spacemaniac&lt;/li&gt;
&lt;li&gt;Alex Touchet (atouchet)&lt;/li&gt;
&lt;li&gt;Guillaume Gomez (guillaumegomez)&lt;/li&gt;
&lt;li&gt;Chris Denton (chrisdenton)&lt;/li&gt;
&lt;li&gt;Thomas Orozco (krallin)&lt;/li&gt;
&lt;li&gt;cui fliter (cuishuang)&lt;/li&gt;
&lt;li&gt;Martin Nordholts (enselic)&lt;/li&gt;
&lt;li&gt;Emil GardstrÃ¶m (emilgardis)&lt;/li&gt;
&lt;li&gt;Arlo Siemsen (arlosi)&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>The Rustup Working Group</name>
        </author>
    </entry>
    
    <entry>
        <title>RLS Deprecation</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2022/07/01/RLS-deprecation.html" type="text/html" title="RLS Deprecation" />
        <published>2022-07-01T00:00:00+00:00</published>
        <updated>2022-07-01T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2022/07/01/RLS-deprecation.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2022/07/01/RLS-deprecation.html">&lt;p&gt;The Rust Language Server (RLS) is being deprecated in favor of &lt;a href&#x3D;&quot;https://rust-analyzer.github.io/&quot;&gt;rust-analyzer&lt;/a&gt;.
Current users of RLS should migrate to using rust-analyzer instead.
Builds of RLS will continue to be released until at least the Rust 1.64 release (2022-09-22), after which no new releases will be made.
This timeline may change if any issues arise.&lt;/p&gt;
&lt;p&gt;RLS is an implementation of the &lt;a href&#x3D;&quot;https://microsoft.github.io/language-server-protocol/&quot;&gt;Language Server Protocol&lt;/a&gt; (LSP) which provides enhanced features with any editor that supports the protocol, such as code-checking and refactoring.
RLS was introduced by &lt;a href&#x3D;&quot;https://rust-lang.github.io/rfcs/1317-ide.html&quot;&gt;RFC 1317&lt;/a&gt; and development was very active from 2016 through 2019.
However, the architecture of RLS has several limitations that can make it difficult to provide low-latency and high-quality responses needed for an interactive environment.&lt;/p&gt;
&lt;p&gt;Development of rust-analyzer began near the beginning of 2018 to provide an alternate LSP implementation for Rust.
rust-analyzer uses a fundamentally different approach that does not rely on using &lt;code&gt;rustc&lt;/code&gt;.
In &lt;a href&#x3D;&quot;https://rust-lang.github.io/rfcs/2912-rust-analyzer.html&quot;&gt;RFC 2912&lt;/a&gt; rust-analyzer was adopted as the official replacement for RLS.&lt;/p&gt;
&lt;p&gt;How you migrate to rust-analyzer will depend on which editor you are using.
If you are using VSCode, you should uninstall the &lt;code&gt;rust-lang.rust&lt;/code&gt; extension and install the official &lt;a href&#x3D;&quot;https://marketplace.visualstudio.com/items?itemName&#x3D;rust-lang.rust-analyzer&quot;&gt;&lt;code&gt;rust-lang.rust-analyzer&lt;/code&gt; extension&lt;/a&gt;.
For other editors, please consult the &lt;a href&#x3D;&quot;https://rust-analyzer.github.io/manual.html&quot;&gt;rust-analyzer manual&lt;/a&gt; for instructions on how to install it.&lt;/p&gt;
&lt;p&gt;Should you have any issues migrating to rust-analyzer, the &lt;a href&#x3D;&quot;https://users.rust-lang.org/c/ide/14&quot;&gt;Editors and IDEs category&lt;/a&gt; on the Rust Users forum is available for help with installation and usage.&lt;/p&gt;
&lt;p&gt;We will soon be marking the official &lt;code&gt;rust-lang.rust&lt;/code&gt; VSCode extension as deprecated, and will be implementing notifications that will inform users about the transition.
After the end of release builds of RLS, we plan to replace the &lt;code&gt;rls&lt;/code&gt; executable in official Rust releases with a small LSP implementation that informs the user that RLS is no longer available.&lt;/p&gt;
&lt;p&gt;We would like to thank everyone who has worked on RLS and rust-analyzer.
These options would not exist without the tremendous effort of all the contributors to these projects.&lt;/p&gt;
</content>

        <author>
            <name>The Rust Dev Tools Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rust 1.62.0</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2022/06/30/Rust-1.62.0.html" type="text/html" title="Announcing Rust 1.62.0" />
        <published>2022-06-30T00:00:00+00:00</published>
        <updated>2022-06-30T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2022/06/30/Rust-1.62.0.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2022/06/30/Rust-1.62.0.html">&lt;p&gt;The Rust team is happy to announce a new version of Rust, 1.62.0. Rust is a programming language
empowering everyone to build reliable and efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via rustup, you can get 1.62.0 with:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-console&quot;&gt;rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt;
from the appropriate page on our website, and check out the
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1620-2022-06-30&quot;&gt;detailed release notes for 1.62.0&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;p&gt;If you&#x27;d like to help us out by testing future releases, you might consider updating locally to use
the beta channel (&lt;code&gt;rustup default beta&lt;/code&gt;) or the nightly channel (&lt;code&gt;rustup default nightly&lt;/code&gt;).
Please &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/new/choose&quot;&gt;report&lt;/a&gt; any bugs you might come across!&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-in-1620-stable&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-in-1620-stable&quot;&gt;&lt;/a&gt;What&#x27;s in 1.62.0 stable&lt;/h2&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#cargo-add&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;cargo-add&quot;&gt;&lt;/a&gt;&lt;code&gt;cargo add&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;You can now add new dependencies directly from the command line using &lt;code&gt;cargo add&lt;/code&gt;. This command supports specifying features and versions. It can also be used to modify existing dependencies.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-text&quot;&gt;cargo add log
cargo add serde --features derive
cargo add nom@5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See the &lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/cargo/commands/cargo-add.html&quot;&gt;cargo documentation&lt;/a&gt; for more.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#default-enum-variants&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;default-enum-variants&quot;&gt;&lt;/a&gt;&lt;code&gt;#[default]&lt;/code&gt; enum variants&lt;/h3&gt;
&lt;p&gt;You can now use &lt;code&gt;#[derive(Default)]&lt;/code&gt; on enums if you specify a default variant. For example, until now you would have to manually write a &lt;code&gt;Default&lt;/code&gt; impl for this enum:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;#[derive(Default)]
enum Maybe&amp;lt;T&amp;gt; {
    #[default]
    Nothing,

    Something(T),
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As of now only &amp;quot;unit&amp;quot; variants (variants that have no fields) are allowed to be marked &lt;code&gt;#[default]&lt;/code&gt;. More information is available in the &lt;a href&#x3D;&quot;https://rust-lang.github.io/rfcs/3107-derive-default-enum.html&quot;&gt;RFC&lt;/a&gt; for this feature.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#thinner-faster-mutexes-on-linux&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;thinner-faster-mutexes-on-linux&quot;&gt;&lt;/a&gt;Thinner, faster mutexes on Linux&lt;/h3&gt;
&lt;p&gt;Previously, &lt;code&gt;Mutex&lt;/code&gt;, &lt;code&gt;Condvar&lt;/code&gt;, and &lt;code&gt;RwLock&lt;/code&gt; were backed by the pthreads library on Linux. The pthreads locks support more features than the Rust APIs themselves do, including runtime configuration, and are designed to be used in languages with fewer static guarantees than Rust provides.&lt;/p&gt;
&lt;p&gt;The mutex implementation, for example, is 40 bytes and cannot be moved. This forced the standard library to allocate a &lt;code&gt;Box&lt;/code&gt; behind the scenes for each new mutex for platforms that use pthreads.&lt;/p&gt;
&lt;p&gt;Rust&#x27;s standard library now ships with a raw futex-based implementation of these locks on Linux, which is very lightweight and doesn&#x27;t require extra allocation. In 1.62.0 &lt;code&gt;Mutex&lt;/code&gt; only needs 5 bytes for its internal state on Linux, though this may change in future versions.&lt;/p&gt;
&lt;p&gt;This is part of a long effort to improve the efficiency of Rust&#x27;s lock types, which includes previous improvements on Windows such as unboxing its primitives. You can read more about that effort in the &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/93740&quot;&gt;tracking issue&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#bare-metal-x86_64-target&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;bare-metal-x86_64-target&quot;&gt;&lt;/a&gt;Bare metal &lt;code&gt;x86_64&lt;/code&gt; target&lt;/h3&gt;
&lt;p&gt;It&#x27;s now easier to build OS-less binaries for &lt;code&gt;x86_64&lt;/code&gt;, for example when writing a kernel. The &lt;a href&#x3D;&quot;https://doc.rust-lang.org/beta/rustc/platform-support/x86_64-unknown-none.html&quot;&gt;&lt;code&gt;x86_64-unknown-none&lt;/code&gt; target&lt;/a&gt; has been promoted to &lt;a href&#x3D;&quot;https://doc.rust-lang.org/rustc/platform-support.html#tier-2&quot;&gt;Tier 2&lt;/a&gt; and can be installed with rustup.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-console&quot;&gt;rustup target add x86_64-unknown-none
rustc --target x86_64-unknown-none my_no_std_program.rs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can read more about development using &lt;code&gt;no_std&lt;/code&gt; in the &lt;a href&#x3D;&quot;https://docs.rust-embedded.org/book/intro/no-std.html&quot;&gt;Embedded Rust book&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#stabilized-apis&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;stabilized-apis&quot;&gt;&lt;/a&gt;Stabilized APIs&lt;/h3&gt;
&lt;p&gt;The following methods and trait implementations are now stabilized:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.bool.html#method.then_some&quot;&gt;&lt;code&gt;bool::then_some&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f32.html#method.total_cmp&quot;&gt;&lt;code&gt;f32::total_cmp&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/primitive.f64.html#method.total_cmp&quot;&gt;&lt;code&gt;f64::total_cmp&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/io/struct.Stdin.html#method.lines&quot;&gt;&lt;code&gt;Stdin::lines&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/os/windows/process/trait.CommandExt.html#tymethod.raw_arg&quot;&gt;&lt;code&gt;windows::CommandExt::raw_arg&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/panic/struct.AssertUnwindSafe.html#impl-Default&quot;&gt;&lt;code&gt;impl&amp;lt;T: Default&amp;gt; Default for AssertUnwindSafe&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/rc/struct.Rc.html#impl-From%3CRc%3Cstr%3E%3E&quot;&gt;&lt;code&gt;From&amp;lt;Rc&amp;lt;str&amp;gt;&amp;gt; for Rc&amp;lt;[u8]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/sync/struct.Arc.html#impl-From%3CArc%3Cstr%3E%3E&quot;&gt;&lt;code&gt;From&amp;lt;Arc&amp;lt;str&amp;gt;&amp;gt; for Arc&amp;lt;[u8]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/std/os/windows/ffi/struct.EncodeWide.html#impl-FusedIterator&quot;&gt;&lt;code&gt;FusedIterator for EncodeWide&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/rust-lang/stdarch/pull/1285&quot;&gt;RDM intrinsics on aarch64&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#other-changes&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;other-changes&quot;&gt;&lt;/a&gt;Other changes&lt;/h3&gt;
&lt;p&gt;There are other changes in the Rust 1.62.0 release. Check out what changed in
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1620-2022-06-30&quot;&gt;Rust&lt;/a&gt;,
&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#cargo-162-2022-06-30&quot;&gt;Cargo&lt;/a&gt;,
and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-clippy/blob/master/CHANGELOG.md#rust-162&quot;&gt;Clippy&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#contributors-to-1620&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;contributors-to-1620&quot;&gt;&lt;/a&gt;Contributors to 1.62.0&lt;/h3&gt;
&lt;p&gt;Many people came together to create Rust 1.62.0.
We couldn&#x27;t have done it without all of you.
&lt;a href&#x3D;&quot;https://thanks.rust-lang.org/rust/1.62.0/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Release Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing The RustConf PostConf UnConf</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2022/06/28/rust-unconference.html" type="text/html" title="Announcing The RustConf PostConf UnConf" />
        <published>2022-06-28T00:00:00+00:00</published>
        <updated>2022-06-28T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2022/06/28/rust-unconference.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2022/06/28/rust-unconference.html">&lt;p&gt;Hello Rust community!&lt;/p&gt;
&lt;p&gt;We&#x27;re excited to announce that the Rust project teams will be hosting an
unconference&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn1&quot; id&#x3D;&quot;fnref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; the day after &lt;a href&#x3D;&quot;https://rustconf.com&quot;&gt;RustConf&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src&#x3D;&quot;../../../images/2022-06-28-rust-unconference/Eventbrite_Unconf.jpg&quot; alt&#x3D;&quot;RustConf PostConf UnConf promo image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The PostConf Unconf will be dedicated to the Rust project and will be a
fantastic opportunity for users, contributors, and maintainers to network and
discuss the project&#x27;s development.&lt;/p&gt;
&lt;p&gt;There will be no set agenda; instead, attendees will decide what will be
discussed together and can move freely between sessions to find ones in which
they can contribute most effectively based on their individual interests and
needs.&lt;/p&gt;
&lt;p&gt;To get the most out of the unconference, jot down your thoughts ahead of time
and bring them ready to share. We will also set up a channel in the RustConf
Discord for folks to communicate and make preliminary, informal plans.&lt;/p&gt;
&lt;p&gt;If you plan to attend, please register as soon as possible to help us plan
appropriately. If we run out of space, project participants will be given preference.
Registration is free and open to everyone attending RustConf.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href&#x3D;&quot;https://www.eventbrite.com/e/rustconf-postconf-unconf-registration-373057423797&quot;&gt;ðŸš¨Register Now!ðŸš¨&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We hope to see you there!&lt;/p&gt;
&lt;section class&#x3D;&quot;footnotes&quot;&gt;
&lt;ol&gt;
&lt;li id&#x3D;&quot;fn1&quot;&gt;
&lt;p&gt;If you are unfamiliar with the notion of an unconference, you may find &lt;a href&#x3D;&quot;https://universityinnovation.org/wiki/Resource:How_to_organize_an_unconference&quot;&gt;this informational piece helpful&lt;/a&gt;. &lt;a href&#x3D;&quot;#fnref1&quot; class&#x3D;&quot;footnote-backref&quot;&gt;â†©&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>

        <author>
            <name>Jane Lusby, on behalf of The Rust Project Teams</name>
        </author>
    </entry>
    
    <entry>
        <title>Call for testing: Cargo sparse-registry</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2022/06/22/sparse-registry-testing.html" type="text/html" title="Call for testing: Cargo sparse-registry" />
        <published>2022-06-22T00:00:00+00:00</published>
        <updated>2022-06-22T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2022/06/22/sparse-registry-testing.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2022/06/22/sparse-registry-testing.html">&lt;p&gt;The Cargo nightly &lt;a href&#x3D;&quot;https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#sparse-registry&quot;&gt;&lt;code&gt;sparse-registry&lt;/code&gt;&lt;/a&gt; feature is ready for testing. The
feature causes Cargo to access the crates.io index over HTTP, rather than git. It can
provide a significant performance improvement, especially if the local copy of
the git index is out-of-date or not yet cloned.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#overview&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;
&lt;p&gt;To try it out, add the &lt;code&gt;-Z sparse-registry&lt;/code&gt; flag on a recent nightly build of Cargo.
For example, to update dependencies:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rustup update nightly
cargo +nightly -Z sparse-registry update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The feature can also be enabled by setting the environment variable
&lt;code&gt;CARGO_UNSTABLE_SPARSE_REGISTRY&#x3D;true&lt;/code&gt;. Setting this variable will have no effect on stable
Cargo, making it easy to opt-in for CI jobs.&lt;/p&gt;
&lt;p&gt;The minimum Cargo version is &lt;code&gt;cargo 2022-06-17&lt;/code&gt;, which is bundled with &lt;code&gt;rustc 2022-06-20&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can &lt;a href&#x3D;&quot;https://internals.rust-lang.org/t/call-for-testing-cargo-sparse-registry/16862&quot;&gt;leave feedback on the internals thread&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you see any issues &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues&quot;&gt;please report them on the Cargo repo&lt;/a&gt;. The output of Cargo
with the environment variable &lt;code&gt;CARGO_LOG&#x3D;cargo::sources::registry::http_remote&#x3D;trace&lt;/code&gt; set
will be helpful in debugging.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#details&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;details&quot;&gt;&lt;/a&gt;Details&lt;/h2&gt;
&lt;p&gt;Accessing the index over HTTP allows crates.io to continue growing without hampering
performance. The current git index continues to grow as new crates are published,
and clients must download the entire index. The HTTP index only requires downloading
metadata for crates in your dependency tree.&lt;/p&gt;
&lt;p&gt;The performance improvement for clients should be especially noticeable in CI
environments, particularly if no local cache of the index exists.&lt;/p&gt;
&lt;p&gt;On the server side, the HTTP protocol is much simpler to cache on a CDN, which improves
scalability and reduces server load. Due to this caching, crate updates may take an
extra minute to appear in the index.&lt;/p&gt;
&lt;p&gt;The Cargo team plans to eventually make this the default way to access crates.io
(though the git index will remain for compatibility with older versions of Cargo and
external tools). &lt;code&gt;Cargo.lock&lt;/code&gt; files will continue to reference the existing crates.io
index on GitHub to avoid churn.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-Z sparse-registry&lt;/code&gt; flag also enables alternative registries to be accessed over
HTTP. For more details, see the &lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/issues/9069&quot;&gt;tracking issue&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#thank-you&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;thank-you&quot;&gt;&lt;/a&gt;Thank you&lt;/h2&gt;
&lt;p&gt;This project has been in the works for over 2.5 years with collaboration from the crates.io,
infra, and Cargo teams.&lt;/p&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/kornelski&quot;&gt;@kornelski&lt;/a&gt; wrote the &lt;a href&#x3D;&quot;https://rust-lang.github.io/rfcs/2789-sparse-index.html&quot;&gt;sparse-index RFC&lt;/a&gt; and initial
performance proof of concept. &lt;a href&#x3D;&quot;https://github.com/jonhoo&quot;&gt;@jonhoo&lt;/a&gt; created the initial
implementation in Cargo and gathered performance data. &lt;a href&#x3D;&quot;https://github.com/arlosi&quot;&gt;@arlosi&lt;/a&gt;
completed the implementation in Cargo and implemented the changes to crates.io to serve the
index. &lt;a href&#x3D;&quot;https://github.com/eh2406&quot;&gt;@eh2406&lt;/a&gt; provided numerous reviews and feedback to get
all the changes landed. Many others from the community helped by providing suggestions,
feedback, and testing.&lt;/p&gt;
&lt;p&gt;Thank you to everyone involved!&lt;/p&gt;
</content>

        <author>
            <name>Arlo Siemsen</name>
        </author>
    </entry>
    
    <entry>
        <title>Announcing Rust 1.61.0</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2022/05/19/Rust-1.61.0.html" type="text/html" title="Announcing Rust 1.61.0" />
        <published>2022-05-19T00:00:00+00:00</published>
        <updated>2022-05-19T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2022/05/19/Rust-1.61.0.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2022/05/19/Rust-1.61.0.html">&lt;p&gt;The Rust team is happy to announce a new version of Rust, 1.61.0. Rust is a programming language
empowering everyone to build reliable and efficient software.&lt;/p&gt;
&lt;p&gt;If you have a previous version of Rust installed via rustup, you can get 1.61.0 with:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-console&quot;&gt;rustup update stable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#x27;t have it already, you can &lt;a href&#x3D;&quot;https://www.rust-lang.org/install.html&quot;&gt;get &lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt;
from the appropriate page on our website, and check out the
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1610-2022-05-19&quot;&gt;detailed release notes for 1.61.0&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;p&gt;If you&#x27;d like to help us out by testing future releases, you might consider updating locally to use
the beta channel (&lt;code&gt;rustup default beta&lt;/code&gt;) or the nightly channel (&lt;code&gt;rustup default nightly&lt;/code&gt;).
Please &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/new/choose&quot;&gt;report&lt;/a&gt; any bugs you might come across!&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#whats-in-1610-stable&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;whats-in-1610-stable&quot;&gt;&lt;/a&gt;What&#x27;s in 1.61.0 stable&lt;/h2&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#custom-exit-codes-from-main&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;custom-exit-codes-from-main&quot;&gt;&lt;/a&gt;Custom exit codes from &lt;code&gt;main&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In the beginning, Rust &lt;code&gt;main&lt;/code&gt; functions could only return the unit type &lt;code&gt;()&lt;/code&gt; (either implicitly or explicitly), always indicating success
in the exit status, and if you wanted otherwise you had to call &lt;code&gt;process::exit(code)&lt;/code&gt;. Since Rust
1.26, &lt;code&gt;main&lt;/code&gt; has been allowed to return a &lt;code&gt;Result&lt;/code&gt;, where &lt;code&gt;Ok&lt;/code&gt; translated to a C &lt;code&gt;EXIT_SUCCESS&lt;/code&gt; and
&lt;code&gt;Err&lt;/code&gt; to &lt;code&gt;EXIT_FAILURE&lt;/code&gt; (also debug-printing the error). Under the hood, these alternate return
types were unified by an unstable &lt;code&gt;Termination&lt;/code&gt; trait.&lt;/p&gt;
&lt;p&gt;In this release, that &lt;code&gt;Termination&lt;/code&gt; trait is finally stable, along with a more general &lt;code&gt;ExitCode&lt;/code&gt;
type that wraps platform-specific return types. That has &lt;code&gt;SUCCESS&lt;/code&gt; and &lt;code&gt;FAILURE&lt;/code&gt; constants, and also
implements &lt;code&gt;From&amp;lt;u8&amp;gt;&lt;/code&gt; for more arbitrary values. The &lt;code&gt;Termination&lt;/code&gt; trait can also be implemented for
your own types, allowing you to customize any kind of reporting before converting to an &lt;code&gt;ExitCode&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, here&#x27;s a type-safe way to write exit codes for a &lt;a href&#x3D;&quot;https://git-scm.com/docs/git-bisect#_bisect_run&quot;&gt;&lt;code&gt;git bisect run&lt;/code&gt;&lt;/a&gt; script:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;use std::process::{ExitCode, Termination};

#[repr(u8)]
pub enum GitBisectResult {
    Good &#x3D; 0,
    Bad &#x3D; 1,
    Skip &#x3D; 125,
    Abort &#x3D; 255,
}

impl Termination for GitBisectResult {
    fn report(self) -&amp;gt; ExitCode {
        // Maybe print a message here
        ExitCode::from(self as u8)
    }
}

fn main() -&amp;gt; GitBisectResult {
    std::panic::catch_unwind(|| {
        todo!(&amp;quot;test the commit&amp;quot;)
    }).unwrap_or(GitBisectResult::Abort)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#more-capabilities-for-const-fn&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;more-capabilities-for-const-fn&quot;&gt;&lt;/a&gt;More capabilities for &lt;code&gt;const fn&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Several incremental features have been stabilized in this release to enable more functionality in
&lt;code&gt;const&lt;/code&gt; functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Basic handling of &lt;code&gt;fn&lt;/code&gt; pointers&lt;/strong&gt;: You can now create, pass, and cast function pointers in a
&lt;code&gt;const fn&lt;/code&gt;. For example, this could be useful to build compile-time function tables for an
interpreter. However, it is still not permitted to call &lt;code&gt;fn&lt;/code&gt; pointers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Trait bounds&lt;/strong&gt;: You can now write trait bounds on generic parameters to &lt;code&gt;const fn&lt;/code&gt;, such as
&lt;code&gt;T: Copy&lt;/code&gt;, where previously only &lt;code&gt;Sized&lt;/code&gt; was allowed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;dyn Trait&lt;/code&gt; types&lt;/strong&gt;: Similarly, &lt;code&gt;const fn&lt;/code&gt; can now deal with trait objects, &lt;code&gt;dyn Trait&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;impl Trait&lt;/code&gt; types&lt;/strong&gt;: Arguments and return values for &lt;code&gt;const fn&lt;/code&gt; can now be opaque &lt;code&gt;impl Trait&lt;/code&gt;
types.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the trait features do not yet support calling methods from those traits in a &lt;code&gt;const fn&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/reference/const_eval.html&quot;&gt;Constant Evaluation&lt;/a&gt; section of
the reference book to learn more about the current capabilities of &lt;code&gt;const&lt;/code&gt; contexts, and future
capabilities can be tracked in &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/issues/57563&quot;&gt;rust#57563&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#static-handles-for-locked-stdio&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;static-handles-for-locked-stdio&quot;&gt;&lt;/a&gt;Static handles for locked stdio&lt;/h3&gt;
&lt;p&gt;The three standard I/O streams -- &lt;code&gt;Stdin&lt;/code&gt;, &lt;code&gt;Stdout&lt;/code&gt;, and &lt;code&gt;Stderr&lt;/code&gt; -- each have a &lt;code&gt;lock(&amp;amp;self)&lt;/code&gt; to
allow more control over synchronizing read and writes. However, they returned lock guards with a
lifetime borrowed from &lt;code&gt;&amp;amp;self&lt;/code&gt;, so they were limited to the scope of the original handle. This was
determined to be an unnecessary limitation, since the underlying locks were actually in static
storage, so now the guards are returned with a &lt;code&gt;&#x27;static&lt;/code&gt; lifetime, disconnected from the handle.&lt;/p&gt;
&lt;p&gt;For example, a common error came from trying to get a handle and lock it in one statement:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;// error[E0716]: temporary value dropped while borrowed
let out &#x3D; std::io::stdout().lock();
//        ^^^^^^^^^^^^^^^^^       - temporary value is freed at the end of this statement
//        |
//        creates a temporary which is freed while still in use
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the lock guard is &lt;code&gt;&#x27;static&lt;/code&gt;, not borrowing from that temporary, so this works!&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#stabilized-apis&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;stabilized-apis&quot;&gt;&lt;/a&gt;Stabilized APIs&lt;/h3&gt;
&lt;p&gt;The following methods and trait implementations are now stabilized:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/1.61.0/std/pin/struct.Pin.html#method.static_mut&quot;&gt;&lt;code&gt;Pin::static_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/1.61.0/std/pin/struct.Pin.html#method.static_ref&quot;&gt;&lt;code&gt;Pin::static_ref&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/1.61.0/std/vec/struct.Vec.html#method.retain_mut&quot;&gt;&lt;code&gt;Vec::retain_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/1.61.0/std/collections/struct.VecDeque.html#method.retain_mut&quot;&gt;&lt;code&gt;VecDeque::retain_mut&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/1.61.0/std/io/struct.Cursor.html#impl-Write-4&quot;&gt;&lt;code&gt;Write&lt;/code&gt; for &lt;code&gt;Cursor&amp;lt;[u8; N]&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/1.61.0/std/os/unix/net/struct.SocketAddr.html#method.from_pathname&quot;&gt;&lt;code&gt;std::os::unix::net::SocketAddr::from_pathname&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/1.61.0/std/process/struct.ExitCode.html&quot;&gt;&lt;code&gt;std::process::ExitCode&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/1.61.0/std/process/trait.Termination.html&quot;&gt;&lt;code&gt;std::process::Termination&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/1.61.0/std/thread/struct.JoinHandle.html#method.is_finished&quot;&gt;&lt;code&gt;std::thread::JoinHandle::is_finished&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following previously stable functions are now &lt;code&gt;const&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/1.61.0/std/primitive.pointer.html#method.offset&quot;&gt;&lt;code&gt;&amp;lt;*const T&amp;gt;::offset&lt;/code&gt;&lt;/a&gt;
and &lt;a href&#x3D;&quot;https://doc.rust-lang.org/1.61.0/std/primitive.pointer.html#method.offset-1&quot;&gt;&lt;code&gt;&amp;lt;*mut T&amp;gt;::offset&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/1.61.0/std/primitive.pointer.html#method.wrapping_offset&quot;&gt;&lt;code&gt;&amp;lt;*const T&amp;gt;::wrapping_offset&lt;/code&gt;&lt;/a&gt;
and &lt;a href&#x3D;&quot;https://doc.rust-lang.org/1.61.0/std/primitive.pointer.html#method.wrapping_offset-1&quot;&gt;&lt;code&gt;&amp;lt;*mut T&amp;gt;::wrapping_offset&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/1.61.0/std/primitive.pointer.html#method.add&quot;&gt;&lt;code&gt;&amp;lt;*const T&amp;gt;::add&lt;/code&gt;&lt;/a&gt;
and &lt;a href&#x3D;&quot;https://doc.rust-lang.org/1.61.0/std/primitive.pointer.html#method.add-1&quot;&gt;&lt;code&gt;&amp;lt;*mut T&amp;gt;::add&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/1.61.0/std/primitive.pointer.html#method.sub&quot;&gt;&lt;code&gt;&amp;lt;*const T&amp;gt;::sub&lt;/code&gt;&lt;/a&gt;
and &lt;a href&#x3D;&quot;https://doc.rust-lang.org/1.61.0/std/primitive.pointer.html#method.sub-1&quot;&gt;&lt;code&gt;&amp;lt;*mut T&amp;gt;::sub&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/1.61.0/std/primitive.pointer.html#method.wrapping_add&quot;&gt;&lt;code&gt;&amp;lt;*const T&amp;gt;::wrapping_add&lt;/code&gt;&lt;/a&gt;
and &lt;a href&#x3D;&quot;https://doc.rust-lang.org/1.61.0/std/primitive.pointer.html#method.wrapping_add-1&quot;&gt;&lt;code&gt;&amp;lt;*mut T&amp;gt;::wrapping_add&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/1.61.0/std/primitive.pointer.html#method.wrapping_sub&quot;&gt;&lt;code&gt;&amp;lt;*const T&amp;gt;::wrapping_sub&lt;/code&gt;&lt;/a&gt;
and &lt;a href&#x3D;&quot;https://doc.rust-lang.org/1.61.0/std/primitive.pointer.html#method.wrapping_sub-1&quot;&gt;&lt;code&gt;&amp;lt;*mut T&amp;gt;::wrapping_sub&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/1.61.0/std/primitive.slice.html#method.as_mut_ptr&quot;&gt;&lt;code&gt;&amp;lt;[T]&amp;gt;::as_mut_ptr&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/1.61.0/std/primitive.slice.html#method.as_ptr_range&quot;&gt;&lt;code&gt;&amp;lt;[T]&amp;gt;::as_ptr_range&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://doc.rust-lang.org/1.61.0/std/primitive.slice.html#method.as_mut_ptr_range&quot;&gt;&lt;code&gt;&amp;lt;[T]&amp;gt;::as_mut_ptr_range&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#other-changes&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;other-changes&quot;&gt;&lt;/a&gt;Other changes&lt;/h3&gt;
&lt;p&gt;There are other changes in the Rust 1.61.0 release. Check out what changed in
&lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1610-2022-05-19&quot;&gt;Rust&lt;/a&gt;,
&lt;a href&#x3D;&quot;https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#cargo-161-2022-05-19&quot;&gt;Cargo&lt;/a&gt;,
and &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust-clippy/blob/master/CHANGELOG.md#rust-161&quot;&gt;Clippy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In a future release we&#x27;re planning to increase the baseline requirements for
the Linux kernel to version 3.2, and for glibc to version 2.17. We&#x27;d love
your feedback in &lt;a href&#x3D;&quot;https://github.com/rust-lang/rust/pull/95026&quot;&gt;rust#95026&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#contributors-to-1610&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;contributors-to-1610&quot;&gt;&lt;/a&gt;Contributors to 1.61.0&lt;/h3&gt;
&lt;p&gt;Many people came together to create Rust 1.61.0.
We couldn&#x27;t have done it without all of you.
&lt;a href&#x3D;&quot;https://thanks.rust-lang.org/rust/1.61.0/&quot;&gt;Thanks!&lt;/a&gt;&lt;/p&gt;
</content>

        <author>
            <name>The Rust Release Team</name>
        </author>
    </entry>
    
    <entry>
        <title>Security advisory: malicious crate rustdecimal</title>
        <link rel="alternate" href="https://blog.rust-lang.org/2022/05/10/malicious-crate-rustdecimal.html" type="text/html" title="Security advisory: malicious crate rustdecimal" />
        <published>2022-05-10T00:00:00+00:00</published>
        <updated>2022-05-10T00:00:00+00:00</updated>
        <id>https://blog.rust-lang.org/2022/05/10/malicious-crate-rustdecimal.html</id>
        <content type="html" xml:base="https://blog.rust-lang.org/2022/05/10/malicious-crate-rustdecimal.html">&lt;blockquote&gt;
&lt;p&gt;This is a cross-post of &lt;a href&#x3D;&quot;https://groups.google.com/g/rustlang-security-announcements/c/5DVtC8pgJLw&quot;&gt;the official security advisory&lt;/a&gt;. The
official advisory contains a signed version with our PGP key, as well.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Rust Security Response WG and the crates.io team &lt;a href&#x3D;&quot;https://github.com/paupino/rust-decimal/issues/514#issuecomment-1115408888&quot;&gt;were notified&lt;/a&gt; on
2022-05-02 of the existence of the malicious crate &lt;code&gt;rustdecimal&lt;/code&gt;, which
contained malware. The crate name was intentionally similar to the name of the
popular &lt;a href&#x3D;&quot;https://crates.io/crates/rust_decimal&quot;&gt;&lt;code&gt;rust_decimal&lt;/code&gt;&lt;/a&gt; crate, hoping that potential victims would misspell
its name (an attack called &amp;quot;typosquatting&amp;quot;).&lt;/p&gt;
&lt;p&gt;To protect the security of the ecosystem, the crates.io team permanently
removed the crate from the registry as soon as it was made aware of the
malware. An analysis of all the crates on crates.io was also performed, and no
other crate with similar code patterns was found.&lt;/p&gt;
&lt;p&gt;Keep in mind that the &lt;a href&#x3D;&quot;https://crates.io/crates/rust_decimal&quot;&gt;&lt;code&gt;rust_decimal&lt;/code&gt;&lt;/a&gt; crate was &lt;strong&gt;not&lt;/strong&gt; compromised, and it
is still safe to use.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#analysis-of-the-crate&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;analysis-of-the-crate&quot;&gt;&lt;/a&gt;Analysis of the crate&lt;/h2&gt;
&lt;p&gt;The crate had less than 500 downloads since its first release on 2022-03-25,
and no crates on the crates.io registry depended on it.&lt;/p&gt;
&lt;p&gt;The crate contained identical source code and functionality as the legit
&lt;code&gt;rust_decimal&lt;/code&gt; crate, except for the &lt;code&gt;Decimal::new&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;When the function was called, it checked whether the &lt;code&gt;GITLAB_CI&lt;/code&gt; environment
variable was set, and if so it downloaded a binary payload into
&lt;code&gt;/tmp/git-updater.bin&lt;/code&gt; and executed it. The binary payload supported both Linux
and macOS, but not Windows.&lt;/p&gt;
&lt;p&gt;An analysis of the binary payload was not possible, as the download URL didn&#x27;t
work anymore when the analysis was performed.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#recommendations&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;recommendations&quot;&gt;&lt;/a&gt;Recommendations&lt;/h2&gt;
&lt;p&gt;If your project or organization is running GitLab CI, we strongly recommend
checking whether your project or one of its dependencies depended on the
&lt;code&gt;rustdecimal&lt;/code&gt; crate, starting from 2022-03-25. If you notice a dependency on
that crate, you should consider your CI environment to be compromised.&lt;/p&gt;
&lt;p&gt;In general, we recommend regularly auditing your dependencies, and only
depending on crates whose author you trust. If you notice any suspicious
behavior in a crate&#x27;s source code please follow &lt;a href&#x3D;&quot;https://www.rust-lang.org/policies/security&quot;&gt;the Rust security
policy&lt;/a&gt; and report it to the Rust Security Response WG.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#acknowledgements&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;acknowledgements&quot;&gt;&lt;/a&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;We want to thank GitHub user &lt;a href&#x3D;&quot;https://github.com/safinaskar&quot;&gt;&lt;code&gt;@safinaskar&lt;/code&gt;&lt;/a&gt; for identifying the
malicious crate in &lt;a href&#x3D;&quot;https://github.com/paupino/rust-decimal/issues/514#issuecomment-1115408888&quot;&gt;this GitHub issue&lt;/a&gt;.&lt;/p&gt;
</content>

        <author>
            <name>The Rust Security Response WG</name>
        </author>
    </entry>
    
</feed>
